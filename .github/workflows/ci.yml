name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'
  RUST_VERSION: 'stable'

jobs:
  # Backend Tests
  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run type checking
      run: npm run type-check
    
    - name: Run tests
      run: npm test -- --coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./backend/coverage

  # Frontend Tests
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run type checking
      run: npm run type-check
    
    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID }}

  # Smart Contract Tests
  contracts-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./contracts
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: contracts/package-lock.json
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        override: true
        components: rustfmt, clippy
    
    - name: Install Stylus CLI
      run: cargo install --force cargo-stylus
    
    - name: Install dependencies
      run: npm ci
    
    - name: Compile Solidity contracts
      run: npx hardhat compile
    
    - name: Run Solidity tests
      run: npx hardhat test
    
    - name: Build Stylus contracts
      run: cd stylus && cargo stylus check
    
    - name: Run Rust tests
      run: cd stylus && cargo test

  # ML Pipeline Tests
  ml-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ml
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run linting
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run tests
      run: pytest --cov=. --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./ml

  # Security Audit
  security-audit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Integration Tests
  integration-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, contracts-test]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: chainyodha_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci
    
    - name: Start backend service
      run: |
        cd backend
        npm run build
        npm start &
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/chainyodha_test
        NODE_ENV: test
        PORT: 3001
    
    - name: Wait for backend
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:3001/health; do sleep 1; done'
    
    - name: Run integration tests
      run: |
        cd backend
        npm run test:integration

  # Build and Deploy
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, contracts-test, ml-test, integration-test]
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Build backend
      run: |
        cd backend
        npm ci
        npm run build
    
    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.PROD_API_URL }}
        NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID }}
    
    - name: Create deployment artifact
      run: |
        mkdir -p deployment
        cp -r backend/dist deployment/backend
        cp -r frontend/out deployment/frontend
        cp -r contracts/artifacts deployment/contracts
        cp -r ml deployment/ml
        cp -r scripts deployment/scripts
        cp -r docs deployment/docs
        tar -czf chainyodha-ai-${{ github.event.release.tag_name }}.tar.gz deployment/
    
    - name: Upload release artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./chainyodha-ai-${{ github.event.release.tag_name }}.tar.gz
        asset_name: chainyodha-ai-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip
    
    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        # Add your deployment commands here
        # e.g., deploy to AWS, Vercel, etc.
